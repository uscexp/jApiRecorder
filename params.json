{"name":"jApiRecorder","tagline":"Dynamic proxy to record and replay API method calls.","body":"# jApiRecorder\r\nA dynamic proxy to record and replay API method calls e.g. for testing porposes.\r\n\r\n## News\r\n30.Jul.2014: New release [v1.1.0](https://github.com/uscexp/jApiRecorder/releases/tag/v1.1.0) which adds the new feature of latency simulation.\r\n\r\n## Features\r\n* record and/or replay an API method call return value.\r\n* replace attibute values of return values via dot notation attribute path on replay.\r\n* manipulate replacement values before setting them to the attribute values on the recorded value.\r\n* simulate method call latency on replay.\r\n\r\n## Description\r\nWith jApiRecorder one can creat a dynamic proxy of a class to record/replay API method calls.\r\n\r\n### Modes\r\nThere are four modes to go:\r\n* FOREWARD - calls the original method directly and returns the value.\r\n* RECORD - calls the original method and records the returned value.\r\n* RP_ONLINE - tries first to get a return value from the recorded data. if there is one it will be returned,\r\nelse it calls the original method, records the return value and returns it.\r\n* RP_OFFLINE - tries to get a return value from the recorded data. if there is none it will return null.\r\n\r\n### ReadWriteStrategy and ContentTypeStrategy\r\nIt is possible to implement your own `ReadWriteStrategy` and/or `ContentTypeStrategy`.\r\nYou only have to implement the given interfaces.\r\n\r\nAlready implemented `ContentTypeStrategy` is:\r\n`XStreamContentTypeStrategy` which serialize/deserialize the objects to be recorded/replayed with XStream (XML).\r\n\r\nAlready implemented `ReadWriteStrategy` is:\r\n`H2ReadWriteStrategy` which reads/writes the serialized objects to be recorded/replayed within a H2 database (memory or file database).\r\n\r\n### Attribute Replacement\r\nOne can replace attribute values in the recorded values.\r\nSpecify an attribute path from the recorded  result object in dot notation form (see [jDotNotation](http://uscexp.github.io/jDotNotation/)) to the attribute one want to change. Set a fix value or use an argument passed to the method call.\r\nThe value one want to set to an attribute in the result can be manipulated before setting it to the attribute.\r\nE.g. one want to change a `Date` attribute of the result and change it to the current date. One can add serveral replacement value treatments to change the value, in this example to change it to the current date.\r\n\r\n### Latency Simulation\r\nIt is possible to configure latency simulation, real measured or static delay, globally and/or per method call.\r\nFor real measured latancy simulation one can define how many method calls should be measured to calculate the latency, how many method calls should be skipped (e.g. caching effects) and should the measures be made in one run (at once) or should it be done over several method calls.\r\n\r\n## Example\r\nAn example from a junit test (see more junit tests form more code examples):\r\n```java\r\nContentTypeStrategy contentTypeStrategy = new XStreamContentTypeStrategy();\r\nReadWriteStrategy readWriteStrategy = new H2ReadWriteStrategy();\r\nRecordReplayConfiguration recordReplayConfiguration = new RecordReplayConfiguration();\r\nrecordReplayConfiguration.addArgumentIndices4PrimaryKey(\"simpleLevel2Method\", 0, 1);\r\nTestClass testClass = (TestClass) RecordReplayManager.newInstance(TestClass.class, RecordReplayMode.RECORD, contentTypeStrategy, readWriteStrategy, recordReplayConfiguration);\r\n\r\nDate date = new Date();\r\nString text = \"extern\";\r\nTestClass result = testClass.simpleLevel2Method(3, text, date);\r\n\r\nAssert.assertEquals(text, result.getText());\r\n\r\nString value = \"post_extern\";\r\nReplacementValue replacementValue = ReplacementValueFactory.createReplacementGivenValue(value);\r\nReplacementConfiguration replacementConfiguration = new ReplacementConfiguration(\"text\", replacementValue);\r\nrecordReplayConfiguration.addReplacementConfiguration(\"simpleLevel2Method\", replacementConfiguration );\r\ntestClass = (TestClass) RecordReplayManager.newInstance(TestClass.class, RecordReplayMode.RP_OFFLINE, contentTypeStrategy, readWriteStrategy, recordReplayConfiguration);\r\n\r\nDate date2 = new Date();\r\nresult = testClass.simpleLevel2Method(3, text, date2);\r\n\r\nAssert.assertEquals(value, result.getText());\r\n```\r\nI want to record/replay the method call `simpleLevel2Method` in `TestClass`.\r\nFirst I create a `ContentTypeStrategy` and a `ReadWriteStrategy` instance. Then I need a `RecordReplayConfiguration` where I define which method arguments indices (here 0 and 1) are used to create a primary key for the recorded value for later retrieval. I create a dynamic proxy instance of my `TestClass` in RECORD Mode. Then I call the method to record the result value.\r\nAfterwards I create a `ReplacementValue`, because I want to change the `text` attribute in my `TestClass` on replay. Then I create a `ReplacementConfiguration` with an attribute path to the `text` attribute and the replacement value and add it to the `RecordReplayConfiguration` for `simpleLevel2Method`. I create a dynamic proxy instance of my `TestClass` in RP_OFFLINE Mode. After calling the `simpleLevel2Method` I get the previous recorded value of the `TestClass` except the `text` attribute which returns the value I set with the `ReplacementConfiguration`.\r\n\r\n## Installation\r\n\r\nTo use the library in your java project just put the binary jar file to your classpath. The maven dependency can be found here: [mvnrepository](http://mvnrepository.com/artifact/com.github.uscexp/jApiRecorder)\r\n\r\n(C) 2014 by haui\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}